---
- name: "ALARM | Prepare machines for Ansible"
  hosts: cleanpis
  gather_facts: false
  sudo: false
  tasks:
    - name: "ALARM | Setup | Install Python"
      raw: pacman -Syu python2  --noconfirm
      ignore_errors: yes

- name: "ALARM | Setup machines"
  hosts: cleanpis
  sudo: false
  tasks:
    - {include: tasks/system/alarm_hostname.yml, alarm_hostname: "CTL-R2001", when: ansible_eth0.ipv4.address == "192.168.0.51"}

    - {include: tasks/system/alarm_hostname.yml, alarm_hostname: "CTL-R2002", when: ansible_eth0.ipv4.address == "192.168.0.52"}

    - {include: tasks/system/alarm_hostname.yml, alarm_hostname: "CTL-R2003", when: ansible_eth0.ipv4.address == "192.168.0.53"}

    - include: tasks/setup/alarm_system_preparation.yml

    - include: tasks/setup/system_security/alarm_secure_machines.yml

    - {include: tasks/setup/initialstate.yml, isconf_file: is2001.py, when: ansible_hostname == "CTL-R2001"}

    - {include: tasks/setup/initialstate.yml, isconf_file: is2002.py, when: ansible_hostname == "CTL-R2002"}

    - {include: tasks/setup/initialstate.yml, isconf_file: is2003.py, when: ansible_hostname == "CTL-R2003"}

    - include: tasks/system/reboot.yml

- name: "ALARM | Prep Docker Machines and launch containers"
  hosts: dockerpis
  sudo: True
  vars:
    haproxy_volumes:
      - "/myapp/haproxy/config:/haproxy-override:ro"
      - "/myapp/haproxy/tls:/etc/ssl:ro"

    haproxy_ports:
      - "80:80"
      - "443:443"

    nginx_volumes:
      - "/myapp/nginx/sites-enabled:/etc/nginx/sites-enabled:ro"
      - "/myapp/nginx/html:/var/www/html:ro"

  tasks:
    - include: tasks/docker/arch_docker_setup.yml

    - name: "Docker | Synchronize haproxy.cfg to local system"
      synchronize: src=./files/picluster/haproxy/config/http/ dest=/myapp/haproxy/config/
      when: ansible_hostname == "CTL-R2002"

    - name: "Docker | Synchronize TLS Certificate for HAProxy to local system"
      synchronize: src=./files/picluster/haproxy/tls/ dest=/myapp/haproxy/tls
      when: ansible_hostname == "CTL-R2002"

    - name: "Docker | Synchronize Enabled Sites"
      synchronize: src=./files/picluster/nginx/config/http/ dest=/myapp/nginx/sites-enabled
      when: ansible_hostname == "CTL-R2003"

    - name: "Docker | Synchronize html files to server"
      synchronize: src=./files/picluster/nginx/html dest=/myapp/nginx
      when: ansible_hostname == "CTL-R2003"

    - name: "Docker | Launch HAProxy Container"
      docker:
        name: haproxy1
        registry: DockerHub
        image: "troyfontaine/armhf-haproxy"
        volumes: "{{ haproxy_volumes }}"
        ports: "{{ haproxy_ports }}"
        state: started
        hostname: haproxy1
        restart_policy: always
        restart_policy_retry: 2
      when: ansible_hostname == "CTL-R2002"

    - name: "Docker | Launch Nginx Containers"
      docker:
        name: "nginx{{ item }}"
        registry: DockerHub
        image: "troyfontaine/armhf-nginx"
        volumes: "{{ nginx_volumes }}"
        ports: "800{{ item }}:80"
        state: started
        hostname: "nginx{{ item }}"
        restart_policy: always
        restart_policy_retry: 2
      when: ansible_hostname == "CTL-R2003"
      with_sequence: start=0 end=4